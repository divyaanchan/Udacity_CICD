version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            #aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            #aws cloudformation delete-stack --stack-name udapeople-backendStack-${CIRCLE_WORKFLOW_ID:0:7}
            #aws cloudformation delete-stack --stack-name udapeople-frontendStack-${CIRCLE_WORKFLOW_ID:0:7}
            echo  "Deleted"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            #SUCCESS=`curl -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            #if [ "$SUCCESS" == "Migration Successful" ]; 
            #then
            #   cd ~/project/backend
            #   npm install
            #   npm run migrations:revert
            #   exit 1
            #fi
            exit 0          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ./frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ./backend
             npm i
             npm run  build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            # Your code here
            cd ./frontend
            sudo  npm  install oauth-sign
            sudo  npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end 
          command: |
             # Your code here
             cd ./backend
             sudo  npm  install oauth-sign
             sudo  npm run  test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run audit of  the frontend
          command: |
             # Your code here
             cd ./frontend
             npm i
             npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run audit of  the backend
          command: |
             # Your code here
             cd ./backend
             npm i
             npm audit fix --audit-level=critical 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "udapeople-backendStack-${CIRCLE_WORKFLOW_ID:0:7}" --tags project="udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --tags project="udapeople-frontendStack-${CIRCLE_WORKFLOW_ID:0:7}"   --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip/url using memstash to ansible inventory
          command: |
            cwid=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values=udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}' --query 'Reservations[*].Instances[*].PublicIpAddress' --output text")
            echo $cwid > backip.sh; chmod 755 backip.sh
            backendip=$(./backip.sh)
            curl -H "Content-Type: text/plain" -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request PUT --data "$backendip" https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID}
            cwid2=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values="udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}"' --query 'Reservations[*].Instances[*].PublicDnsName' --output text")
            echo $cwid2 > backurl.sh; chmod 755 backurl.sh
            backendurl=$(./backurl.sh)
            curl -H "Content-Type: text/plain" -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request PUT --data "$backendurl" https://api.memstash.io/values/ec2_back_url_${CIRCLE_WORKFLOW_ID}
            #backendip="18.237.113.95"
            #backendurl="ec2-18-237-113-95.us-west-2.compute.amazonaws.com"
            #curl -H "Content-Type: text/plain" -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request PUT --data "$backendip" https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID}
            #curl -H "Content-Type: text/plain" -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request PUT --data "$backendurl" https://api.memstash.io/values/ec2_back_url_${CIRCLE_WORKFLOW_ID}
            echo "[web]" > .circleci/ansible/inventory.txt
            echo  $backendip >> .circleci/ansible/inventory.txt
            cat  .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root:  ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
             - 69:8e:f5:77:fd:38:4a:11:fe:9c:ae:a8:07:9f:10:94
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            touch .env
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -latr
            cat .env
            npm i
            echo "HOST: " $TYPEORM_HOST
            echo "PWD: " $(pwd)
            echo $TYPEORM_DATABASE
            npm run migrations > migrationresult.txt
      - run:
          name: Send migration results to memstash
          command: |
            #!/bin/bash
            cd backend
            cat migrationresult.txt
            if [ $(grep -i "has been executed successfully" migrationresult.txt | wc -l) -ge 1 ]
              then 
              curl -H "Content-Type: text/plain" -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request PUT --data "Migration Successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              curl -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
              curl -H "Content-Type: text/plain" -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request PUT --data "Migration Failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              curl -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure 
     #- destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .
      - run:
          # MUST be http not https
          name: Get backend url
          command: |
            #API_IPback=$(curl -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request GET https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID})
            API_IPback="18.237.113.95"
            export API_URL=$(echo "http://$API_IPback:3030")
            cd frontend
            echo "${API_URL}" > apiurl.txt
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            export API_URL=$(cat apiurl.txt)
            cat apiurl.txt
            npm i
            npm run build
            #s3Bucket=$(echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}")
            s3Bucket="udapeople-f6cac72"
            aws s3 sync dist s3://$s3Bucket/
            s3FullUrl=("http://$s3Bucket.s3-website-eu-west-1.amazonaws.com")
            curl -H "Content-Type: text/plain" -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request PUT --data "$s3FullUrl" https://api.memstash.io/values/s3bucket_${CIRCLE_WORKFLOW_ID}
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      #- destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
  # Make sure ubuntu is 20.04 in backend.yml or you will have issues with PM2. read .circleci/backend/files for more info
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 69:8e:f5:77:fd:38:4a:11:fe:9c:ae:a8:07:9f:10:94
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip ansible nodejs npm less
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            [[ ! -d backend ]] && mkdir backend
            myenv="backend/.env"
            echo ENVIROMENT=production > $myenv
            echo TYPEORM_CONNECTION=postgres >> $myenv
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $myenv
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $myenv
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $myenv
            echo TYPEORM_HOST=$TYPEORM_HOST >> $myenv
            echo TYPEORM_PORT=$TYPEORM_PORT >> $myenv
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $myenv
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $myenv
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $myenv
            tar -cvf backend.tar backend
            ANSIBLE_HOST_KEY_CHECKING=False
            pwd
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
        #- destroy-environment
  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend  Smoke test
          command: |
            back_ip=$(curl -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request GET https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID})
            if curl -s "http://$back_ip:3030/api/status" | grep "ok"
            then
              echo "Backend alive, Proceeding"
            else
              exit 0
            fi

      - run:
          name: Frontend smoke test.
          command: |
            front_url=$(curl -H "token: e947093d-4e44-45e0-ba3c-90b26352a021" --request GET https://api.memstash.io/values/s3bucket_${CIRCLE_WORKFLOW_ID})
            if curl -s ${front_url} | grep "Welcome"
            then
              echo "Frontend alive"
            else
              exit 0
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          # If we have the cloudfront stack existing, update. if not then create from scratch
          # Note to Make http only request. check cloudfront.yml
          command: |
            echo "Update CloudFront"
            check_for_id=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            if [ -z $check_for_id ]
            then
              aws cloudformation deploy --template-file .circleci/files/cloudfront.yml   --stack-name "Udapeople-Cloudfront"  --region ${AWS_DEFAULT_REGION}   --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
              echo  $check_for_id
            else
              echo "Fresh Deploy"
              aws cloudformation deploy  --template-file .circleci/files/cloudfront.yml  --stack-name "Udapeople-Cloudfront-f6cac72"   --region ${AWS_DEFAULT_REGION}   --parameter-overrides WorkflowID="f6cac72"
            fi

 
workflows:
  default:
    jobs:
     #- build-backend
     #- build-frontend
     #- test-frontend:
     #     requires: [build-frontend]
     #- test-backend:
     #     requires: [build-backend]
     #- scan-backend:
     #     requires: [build-backend]
     #- scan-frontend:
     #     requires: [build-frontend]
     #- deploy-infrastructure
     #- configure-infrastructure:
     #      requires: [deploy-infrastructure]
     #- run-migrations:
     #       requires: [configure-infrastructure]
     #- deploy-frontend:
             #requires: [run-migrations]
     #- deploy-frontend:
             #requires: [run-migrations]
     # - smoke-test
      - cloudfront-update
              #requires: [smoke-test]
